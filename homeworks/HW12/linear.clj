(defn vect [a b] [(- (* (nth a 1) (nth b 2)) (* (nth a 2) (nth b 1))) 
                  (- (* (nth a 2) (nth b 0)) (* (nth a 0) (nth b 2))) 
                  (- (* (nth a 0) (nth b 1)) (* (nth a 1) (nth b 0)))])
(defn transpose [a] (apply mapv vector a))
(defn oper [func] (fn [& operands] (apply mapv func operands)))
(def v+ (oper +))
(def v- (oper -))
(def v* (oper *))
(defn scalar [v1 v2] (apply + (v* v1 v2)))
(defn v*s [v & ss] (mapv (fn [n] (* n (apply * ss))) v))
(def m+ (oper v+))
(def m- (oper v-))
(def m* (oper v*))
(defn m*s [m & ss] (mapv (fn [n] (v*s n (apply * ss))) m))
(defn m*v [m v] (mapv (fn [n] (scalar n v)) m))
(defn m*m [m1 m2] (mapv (fn [n1] (mapv (fn [n2] (scalar n1 n2)) (transpose m2))) m1))
(defn oper2 [operator v1 v2] (cond 
                               (number? v1) (operator v1 v2) 
                              :else (mapv (fn [a b] (oper2 operator a b)) v1 v2)))
(defn s+ [v1 v2] (oper2 + v1 v2))
(defn s- [v1 v2] (oper2 - v1 v2))
(defn s* [v1 v2] (oper2 * v1 v2))
